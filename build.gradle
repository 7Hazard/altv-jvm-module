
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
}

plugins {
    id "java"
    id "eclipse"
    id 'java-library-distribution'
    
    // Publishing
    id "com.jfrog.bintray" version "1.7.3"
    id "maven"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
    }
}

dependencies {
    // https://mvnrepository.com/artifact/com.github.jnr/jnr-ffi
    compile group: 'com.github.jnr', name: 'jnr-ffi', version: '2.1.9'
}

jar {
    manifest {
        attributes(
            'Main-Class': 'alt.v.jvm.Main',
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task wrap(type: Exec) {
    commandLine "node", "wrap"
    dependsOn "module:build"
}
compileJava.dependsOn wrap

task copyToOutput(type: Copy) {
    from jar.destinationDir
    into "build/altv-jvm-module"

    //from configurations.runtime
    //into "build/altv-jvm-module"

    outputs.upToDateWhen { false }
}
jar.finalizedBy copyToOutput

distributions {
    main {
        baseName = 'altv-jvm-module'
        contents {
            from "altv-capi/build/libs/capi/shared/altv-capi.dll", "module/build/libs/module/shared/altv-jvm-module.dll"
        }
    }
}



///
/// Bintray
///

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    javadoc.failOnError(false);
    javadoc.source = sourceSets.main.allJava
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def siteUrl = 'https://gitlab.com/7Hazard/altv-jvm-module'
def gitUrl = 'https://gitlab.com/7Hazard/altv-jvm-module.git'

if (System.hasProperty("version")) version = System.getProperty("version") 
else version = ""//"DEV-"+new Date().format('dd-MMM-yyyy', TimeZone.getTimeZone('GMT'))
group = "7hazard"

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                packaging 'aar'

                name 'alt:V JVM Module'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id '7hazard'
                        name 'Hazard'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

bintray {
    user = System.getProperty('user')
    key =  System.getProperty('apikey')
    configurations = ['archives']
    pkg {
        repo = 'Maven'
        name = 'alt.v.jvm'
        userOrg = "hazard"
        licenses = ['Apache-2.0']
        vcsUrl = gitUrl
        //publish = true
    }
}
