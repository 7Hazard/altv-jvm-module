import org.gradle.internal.os.OperatingSystem;

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
}

plugins {
	id "java"
	id "maven"
    id "de.undercouch.download" version "4.0.4"
}

repositories {
	// maven { url "https://jitpack.io" }
	mavenLocal()
	mavenCentral()
	jcenter()
}

group = 'com.gitlab.7Hazard'

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
	}
}

dependencies {
	// https://mvnrepository.com/artifact/com.github.jnr/jnr-ffi
	implementation 'com.github.jnr:jnr-ffi:2.1.9'
}

def platform = "unknown"
if(OperatingSystem.current().isWindows())
{
	platform = "win32"
}
else if(OperatingSystem.current().isLinux()) {
	platform = "linux"
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-rawtypes" << "-Werror"
}

jar {
	manifest {
		attributes(
			'Main-Class': 'hazard7.altv.jvm.Main',
		)
	}
	
	// javadoc.failOnError(false);
	// javadoc.source = sourceSets.main.allSource

	from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	from sourceSets.main.allSource
	// from javadoc.destinationDir
}

task getCAPI(type: Download) {
	src 'http://github.com/7Hazard/altv-capi/releases/latest/download/altv-capi-server-win32.zip'
	dest buildDir
	overwrite false
}
task dlCAPIJson(type: Download) {
	src 'http://github.com/7Hazard/altv-capi/releases/latest/download/altv-capi-server.json'
	dest buildDir
	overwrite false
}
task unzipCAPI(type: Copy) {
  from zipTree("build/altv-capi-server-win32.zip")
  into buildDir
}
getCAPI.finalizedBy dlCAPIJson
getCAPI.finalizedBy unzipCAPI
jar.dependsOn dlCAPIJson

if(System.env['JITPACK'] == null)
{
	task wrap(type: Exec) {
		standardOutput = out
		commandLine "node", "wrap"
		dependsOn "getCAPI"
	}
	compileJava.dependsOn wrap

	task buildModule(type: Exec) {
		standardOutput = out
		workingDir "module"

		def version = "${System.env['CI_PIPELINE_IID']}-${System.env['CI_COMMIT_REF_SLUG']}"
		
		if(OperatingSystem.current().isWindows())
			commandLine "cmd", "/c", "build.bat", version // windows
		else
			commandLine "./build.sh", version // linux/mac
	}
	buildModule.dependsOn getCAPI

	task buildModuleWin32Cross(type: Exec) {
		standardOutput = out
		workingDir "module"

		def version = "${System.env['CI_PIPELINE_IID']}-${System.env['CI_COMMIT_REF_SLUG']}"
		
		commandLine "./build-win32.sh", version // linux/mac
	}
	buildModuleWin32Cross.dependsOn getCAPI

	task buildModuleDebug(type: Exec) {
		standardOutput = out
		workingDir "module"

		def version = "${System.env['CI_PIPELINE_IID']}-${System.env['CI_COMMIT_REF_SLUG']}"
		
		if(OperatingSystem.current().isWindows())
			commandLine "cmd", "/c", "build-debug.bat", version // windows
		else
		{
			doFirst {
				throw new GradleException("DEBUG MODULE BUILD ONLY SUPPORTED ON NON-WINDOWS")
			}
			doLast {
				commandLine "./build-debug.sh", version // linux/mac
			}
		}
	}
	buildModuleDebug.dependsOn getCAPI
	
	task copyToOutput(type: Copy) {
		// from jar.destinationDir
		from "build/libs/altv-jvm-module.jar"
		into "build/$platform/altv-jvm-module/"

		outputs.upToDateWhen { false }
	}
	jar.finalizedBy copyToOutput

	task copyToOutputWin32Cross(type: Copy) {
		from "build/libs/altv-jvm-module.jar"
		into "build/win32/altv-jvm-module/"

		outputs.upToDateWhen { false } 
	}
	buildModuleWin32Cross.dependsOn copyToOutputWin32Cross
}

///
/// Publishing
///

if(System.env['JITPACK'] != null)
{
	println "JITPACK BUILD"
}
