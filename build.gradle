import org.gradle.internal.os.OperatingSystem;

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
}

plugins {
	id "java"
	id "maven"
}

repositories {
	// maven { url "https://jitpack.io" }
	mavenLocal()
	mavenCentral()
	jcenter()
}

group = 'com.gitlab.7Hazard'

sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
	}
}

dependencies {
	// https://mvnrepository.com/artifact/com.github.jnr/jnr-ffi
	implementation 'com.github.jnr:jnr-ffi:2.1.9'
}

def platform = "unknown"
if(OperatingSystem.current().isWindows())
{
	platform = "win32"
}
else if(OperatingSystem.current().isLinux()) {
	platform = "linux"
}

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:all" << "-Xlint:-rawtypes" << "-Werror"
}

jar {
	manifest {
		attributes(
			'Main-Class': 'hazard7.altv.jvm.Main',
		)
	}
	
	// javadoc.failOnError(false);
	// javadoc.source = sourceSets.main.allSource

	from configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	from sourceSets.main.allSource
	// from javadoc.destinationDir
}

def downloadFile(url, dest)
{
	def f = new File(dest)
	if (!f.exists()) {
			new URL(url).withInputStream{ i -> f.withOutputStream{ it << i }}
	}
}

task getCAPI(type: Copy) {
	mkdir "build/altv-capi/server"

	downloadFile("https://cdn.altv.mp/server/hazard-dev1/x64_win32/capi/server/altv-capi.json", "build/altv-capi/altv-capi-server.json")
	downloadFile("https://cdn.altv.mp/server/hazard-dev1/x64_win32/capi/altv-capi-server.h", "build/altv-capi/altv-capi-server.h")
	downloadFile("https://cdn.altv.mp/server/hazard-dev1/x64_win32/capi/altv-capi-predefines.h", "build/altv-capi/altv-capi-predefines.h")
	downloadFile("https://cdn.altv.mp/server/hazard-dev1/x64_win32/capi/altv-capi-extra.h", "build/altv-capi/altv-capi-extra.h")
	downloadFile("https://cdn.altv.mp/server/hazard-dev1/x64_win32/capi/server/altv-capi.h", "build/altv-capi/server/altv-capi.h")
	
	if(OperatingSystem.current().isWindows())
	{
		downloadFile("https://cdn.altv.mp/server/hazard-dev1/x64_win32/altv-server.lib", "build/altv-capi/altv-server.lib")
	}
}
// prep.dependsOn getCAPI
jar.dependsOn getCAPI

if(System.env['JITPACK'] == null)
{
	task wrap(type: Exec) {
		standardOutput = out
		commandLine "node", "wrap"
		dependsOn "getCAPI"
	}
	compileJava.dependsOn wrap

	task buildModule(type: Exec) {
		standardOutput = out
		workingDir "module"

		def version = "${System.env['CI_PIPELINE_IID']}-${System.env['CI_COMMIT_REF_SLUG']}"
		
		if(OperatingSystem.current().isWindows())
			commandLine "cmd", "/c", "build.bat", version // windows
		else
			commandLine "./build.sh", version // linux/mac

		//store the output instead of printing to the console
		standardOutput = out
	}
	buildModule.dependsOn getCAPI

	task buildModuleDebug(type: Exec) {
		standardOutput = out
		workingDir "module"

		def version = "${System.env['CI_PIPELINE_IID']}-${System.env['CI_COMMIT_REF_SLUG']}"
		
		if(OperatingSystem.current().isWindows())
			commandLine "cmd", "/c", "build-debug.bat", version // windows
		else
		{
			doFirst {
				throw new GradleException("DEBUG MODULE BUILD ONLY SUPPORTED ON NON-WINDOWS")
			}
			doLast {
				commandLine "./build-debug.sh", version // linux/mac
			}
		}

		//store the output instead of printing to the console
		standardOutput = out
	}
	buildModuleDebug.dependsOn getCAPI
}

task copyToOutput(type: Copy) {
	// from jar.destinationDir
	from "build/libs/altv-jvm-module.jar"
	into "build/$platform/altv-jvm-module"

	outputs.upToDateWhen { false }
}
jar.finalizedBy copyToOutput

///
/// Publishing
///

if(System.env['JITPACK'] != null)
{
	println "JITPACK BUILD"
}
