apply plugin: "cpp"

if (System.hasProperty("version")) version = System.getProperty("version") 
else version = ""//"DEV-"+new Date().format('dd-MMM-yyyy', TimeZone.getTimeZone('GMT'))

model { 
    components {
        module(NativeLibrarySpec) {
            baseName "altv-jvm-module"
            targetPlatform "x64"
            sources {
                cpp {
                    source {
                        srcDir "src"
                        include "**/*.cpp"
                    }
                    exportedHeaders {
                        srcDir "src"
                        srcDir "altv-capi/include"
                    }
                    
                    lib project: ":altv-capi", library: "capi", linkage: 'shared'
                    lib library: "jvm", linkage: "shared"
                }
            }
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jvm {
                binaries.withType(SharedLibraryBinary) {
                    if(targetPlatform.operatingSystem.windows){
                        headers.srcDir "C:/Program Files/RedHat/java-11-openjdk-11.0.1-1/include"
                        headers.srcDir "C:/Program Files/RedHat/java-11-openjdk-11.0.1-1/include/win32"
                        sharedLibraryFile = file("C:/Program Files/RedHat/java-11-openjdk-11.0.1-1/bin/server/jvm.dll")
                        sharedLibraryLinkFile = file("C:/Program Files/RedHat/java-11-openjdk-11.0.1-1/lib/jvm.lib")
                    }
                    else {
                        //throw "JVM linkage for Linux and Mac unspecified"
                    }
                }
            }
        }
    }

    binaries {
        all {
            cppCompiler.define "JVM_MODULE_VERSION=\"${version}\""
            cppCompiler.define "JVM_JAR_NAME=\"altv-jvm-module${version == "" ? "" : "-${version}"}.jar\""

            if(toolChain in VisualCpp) {
                cppCompiler.args "/std:c++17", "/EHsc", "/Z7"
                linker.args "/DEBUG"
            }
        }
    }

    platforms {
        x64 {
            architecture "x86_64"
        }
    }
}

task copyToOutput(type: Copy) {
    from "build/libs/module/shared/altv-jvm-module.dll", "../altv-capi/build/libs/capi/shared/altv-capi.dll"
    into "../build/altv-jvm-module/"

    outputs.upToDateWhen { false }
}
build.finalizedBy copyToOutput
